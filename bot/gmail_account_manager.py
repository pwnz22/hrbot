"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Gmail –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
"""
import os
import json
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build

SCOPES = ['https://www.googleapis.com/auth/gmail.modify']
CREDENTIALS_PATH = 'gmail_tokens/credentials.json'
ACCOUNTS_CONFIG_PATH = 'bot/gmail_accounts.json'


class GmailAccountManager:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Gmail –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏ –¥–ª—è –±–æ—Ç–∞"""

    @staticmethod
    def load_accounts():
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        if not os.path.exists(ACCOUNTS_CONFIG_PATH):
            return []

        with open(ACCOUNTS_CONFIG_PATH, 'r', encoding='utf-8') as f:
            return json.load(f)

    @staticmethod
    def save_accounts(accounts):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        os.makedirs(os.path.dirname(ACCOUNTS_CONFIG_PATH), exist_ok=True)
        with open(ACCOUNTS_CONFIG_PATH, 'w', encoding='utf-8') as f:
            json.dump(accounts, f, indent=2, ensure_ascii=False)

    @staticmethod
    def generate_auth_url():
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç OAuth URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (success: bool, auth_url: str –∏–ª–∏ error_message: str, flow_data: dict –∏–ª–∏ None)
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ credentials
        if not os.path.exists(CREDENTIALS_PATH):
            return False, "‚ùå –§–∞–π–ª credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ gmail_tokens/", None

        try:
            # –°–æ–∑–¥–∞–µ–º OAuth flow
            flow = InstalledAppFlow.from_client_secrets_file(
                CREDENTIALS_PATH,
                SCOPES,
                redirect_uri='urn:ietf:wg:oauth:2.0:oob'  # –î–ª—è manual copy/paste
            )

            auth_url, _ = flow.authorization_url(prompt='consent')

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º flow –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            flow_data = {
                'client_config': flow.client_config,
                'scopes': SCOPES
            }

            return True, auth_url, flow_data

        except Exception as e:
            return False, f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ URL: {str(e)}", None

    @staticmethod
    def complete_auth_with_code(auth_code):
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (success: bool, message: str, account_data: dict –∏–ª–∏ None)
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ credentials
        if not os.path.exists(CREDENTIALS_PATH):
            return False, "‚ùå –§–∞–π–ª credentials.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ gmail_tokens/", None

        try:
            # –°–æ–∑–¥–∞–µ–º flow –∑–∞–Ω–æ–≤–æ
            flow = InstalledAppFlow.from_client_secrets_file(
                CREDENTIALS_PATH,
                SCOPES,
                redirect_uri='urn:ietf:wg:oauth:2.0:oob'
            )

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–¥
            flow.fetch_token(code=auth_code)
            creds = flow.credentials

            # –ü–æ–ª—É—á–∞–µ–º email –∞–¥—Ä–µ—Å
            service = build('gmail', 'v1', credentials=creds)
            profile = service.users().getProfile(userId='me').execute()
            email = profile.get('emailAddress')

            if not email:
                return False, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å email –∞–¥—Ä–µ—Å", None

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID
            account_id = email.split('@')[0].replace('.', '_')

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            accounts = GmailAccountManager.load_accounts()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            for account in accounts:
                if account['id'] == account_id:
                    return False, f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç {email} —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω", None

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º token
            token_path = f"gmail_tokens/token_{account_id}.json"
            os.makedirs('gmail_tokens', exist_ok=True)

            with open(token_path, 'w') as token_file:
                token_file.write(creds.to_json())

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –∞–∫–∫–∞—É–Ω—Ç–∞
            new_account = {
                "id": account_id,
                "name": email,
                "credentials_path": CREDENTIALS_PATH,
                "token_path": token_path,
                "enabled": False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
            accounts.append(new_account)
            GmailAccountManager.save_accounts(accounts)

            success_message = (
                f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                f"üìß Email: {email}\n"
                f"üÜî ID: {account_id}\n"
                f"üè∑Ô∏è –°—Ç–∞—Ç—É—Å: ‚ùå –û—Ç–∫–ª—é—á–µ–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
            )

            return True, success_message, new_account

        except Exception as e:
            return False, f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}", None

    @staticmethod
    def toggle_account(account_id, enable):
        """
        –í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (success: bool, message: str)
        """
        accounts = GmailAccountManager.load_accounts()

        for account in accounts:
            if account['id'] == account_id:
                account['enabled'] = enable
                GmailAccountManager.save_accounts(accounts)

                status = "–≤–∫–ª—é—á–µ–Ω" if enable else "–æ—Ç–∫–ª—é—á–µ–Ω"
                return True, f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account.get('name', account_id)} {status}"

        return False, "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"

    @staticmethod
    def get_account(account_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        accounts = GmailAccountManager.load_accounts()

        for account in accounts:
            if account['id'] == account_id:
                return account

        return None

    @staticmethod
    def remove_account(account_id):
        """
        –£–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —É–¥–∞–ª—è–µ—Ç token —Ñ–∞–π–ª
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (success: bool, message: str)
        """
        accounts = GmailAccountManager.load_accounts()

        account_to_remove = None
        for i, account in enumerate(accounts):
            if account['id'] == account_id:
                account_to_remove = account
                accounts.pop(i)
                break

        if not account_to_remove:
            return False, "‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"

        # –£–¥–∞–ª—è–µ–º token —Ñ–∞–π–ª
        token_path = account_to_remove.get('token_path')
        if token_path and os.path.exists(token_path):
            try:
                os.remove(token_path)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å token —Ñ–∞–π–ª: {e}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        GmailAccountManager.save_accounts(accounts)

        return True, f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {account_to_remove.get('name', account_id)} —É–¥–∞–ª–µ–Ω"
