import os
import re
import aiofiles
import base64
from datetime import datetime
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from sqlalchemy.exc import IntegrityError
from bs4 import BeautifulSoup
import sys

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from shared.database.database import AsyncSessionLocal
from shared.models.vacancy import Application, Vacancy
from shared.services.resume_summary_service import ResumeSummaryService

SCOPES = ['https://www.googleapis.com/auth/gmail.modify']

class GmailParser:
    def __init__(self, account_id="main", credentials_path="gmail_tokens/credentials.json", token_path="gmail_tokens/token_main.json"):
        self.account_id = account_id
        self.credentials_path = credentials_path
        self.token_path = token_path
        self.service = None
        self.resume_summary_service = ResumeSummaryService()
        self.authenticate()

    def authenticate(self):
        creds = None
        if os.path.exists(self.token_path):
            creds = Credentials.from_authorized_user_file(self.token_path, SCOPES)

        if not creds or not creds.valid:
            if creds and creds.expired and creds.refresh_token:
                creds.refresh(Request())
            else:
                flow = InstalledAppFlow.from_client_secrets_file(
                    self.credentials_path, SCOPES)
                creds = flow.run_local_server(port=0)

            with open(self.token_path, 'w') as token:
                token.write(creds.to_json())

        self.service = build('gmail', 'v1', credentials=creds)
        print(f"‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞: {self.account_id}")

    def extract_contact_info(self, text):
        email_pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
        phone_pattern = r'(\+?[7-8][\s\-]?\(?[0-9]{3}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2})'

        emails = re.findall(email_pattern, text)
        phones = re.findall(phone_pattern, text)

        return {
            'email': emails[0] if emails else None,
            'phone': phones[0] if phones else None
        }

    async def download_attachment(self, message_id, attachment_id, filename, applicant_name="Unknown"):
        try:
            attachment = self.service.users().messages().attachments().get(
                userId='me', messageId=message_id, id=attachment_id
            ).execute()

            file_data = base64.urlsafe_b64decode(attachment['data'])

            # –û—á–∏—â–∞–µ–º –∏–º—è –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            safe_name = "".join(c for c in applicant_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
            safe_name = safe_name.replace(' ', '_')

            file_path = f"downloads/{safe_name}_{filename}"

            async with aiofiles.open(file_path, 'wb') as f:
                await f.write(file_data)

            return file_path
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–ª–æ–∂–µ–Ω–∏—è: {e}")
            return None

    async def parse_new_emails(self):
        parsed_count = 0
        new_vacancies = []

        try:
            print(f"üìß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞: {self.account_id}")
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–∏—Å—å–º–∞ –æ—Ç SomonTj —Å –Ω—É–∂–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º (–≤–∫–ª—é—á–∞—è –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ)
            query = 'from:noreply@somon.tj subject:"–û—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é"'
            results = self.service.users().messages().list(
                userId='me', q=query
            ).execute()

            messages = results.get('messages', [])

            for message in messages:
                result = await self.process_message(message['id'])
                if result and result.get('success'):
                    parsed_count += 1

                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é –≤ —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞
                    if result.get('new_vacancy'):
                        vacancy_title = result.get('vacancy_title')
                        if vacancy_title and vacancy_title not in new_vacancies:
                            new_vacancies.append(vacancy_title)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∏—Å–µ–º: {e}")

        return {
            "parsed_count": parsed_count,
            "new_vacancies": new_vacancies
        }

    async def process_message(self, message_id):
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ –ø–∏—Å—å–º–æ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–µ–Ω–æ –ª–∏ –æ–Ω–æ
            async with AsyncSessionLocal() as session:
                from sqlalchemy import select
                existing_check = await session.execute(
                    select(Application).where(Application.gmail_message_id == message_id)
                )
                existing_app = existing_check.scalar_one_or_none()
                if existing_app:
                    if existing_app.deleted_at is not None:
                        print(f"–ü–∏—Å—å–º–æ {message_id} –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    else:
                        print(f"–ü–∏—Å—å–º–æ {message_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    return {"success": False}

            message = self.service.users().messages().get(
                userId='me', id=message_id, format='full'
            ).execute()

            headers = message['payload'].get('headers', [])
            subject = next((h['value'] for h in headers if h['name'] == 'Subject'), '')
            from_email = next((h['value'] for h in headers if h['name'] == 'From'), '')

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–∏—Å—å–º–æ –æ—Ç SomonTj
            if 'noreply@somon.tj' not in from_email:
                print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∏—Å—å–º–æ –Ω–µ –æ—Ç SomonTj: {from_email}")
                return {"success": False}

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "–û—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é"
            if not subject.startswith('–û—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é'):
                print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∏—Å—å–º–æ –±–µ–∑ –Ω—É–∂–Ω–æ–π —Ç–µ–º—ã: {subject}")
                return {"success": False}

            print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∏—Å—å–º–æ –æ—Ç SomonTj: {subject}")

            body = self.extract_body(message['payload'])

            contact_info = self.extract_somon_contact_info(body)
            print(f"–ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {contact_info}")

            vacancy_title = self.extract_vacancy_title(subject)
            print(f"–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏: {vacancy_title}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≤–ª–æ–∂–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            attachment_url = None
            attachment_filename = None

            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–ª–æ–∂–µ–Ω–∏—è –ø—Ä—è–º–æ –≤ HTML
            def find_attachments_in_html(html_body):
                nonlocal attachment_url, attachment_filename
                try:
                    from bs4 import BeautifulSoup
                    soup = BeautifulSoup(html_body, 'html.parser')

                    # –ò—â–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –≤ –ø–∏—Å—å–º–µ
                    links = soup.find_all('a', href=True)

                    for link in links:
                        href = link['href']
                        link_text = link.get_text().strip()

                        # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–ª–æ–∂–µ–Ω–∏—è Gmail —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
                        if ('mail.google.com' in href and 'attid=' in href and 'view=att' in href):
                            attachment_url = href
                            # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ–∫—Ä—É–∂–∞—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                            if link_text and not link_text.startswith('http') and len(link_text) > 3:
                                attachment_filename = link_text
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–ª–æ–∂–µ–Ω–∏–µ: {attachment_filename}")
                            return True

                        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ –∏—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ mail-attachment.googleusercontent.com
                        elif 'mail-attachment.googleusercontent.com' in href:
                            attachment_url = href
                            if link_text and not link_text.startswith('http') and len(link_text) > 3:
                                attachment_filename = link_text
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–ª–æ–∂–µ–Ω–∏–µ: {attachment_filename}")
                            return True

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–æ–∫ –≤ HTML: {e}")
                return False

            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≥–æ—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –≤ HTML
            if body:
                find_attachments_in_html(body)

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ HTML, –∏—â–µ–º —á–µ—Ä–µ–∑ parts (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)
            if not attachment_url:
                def find_attachments(parts, depth=0):
                    nonlocal attachment_url, attachment_filename
                    for i, part in enumerate(parts):
                        if part.get('filename') and part.get('filename') != '':
                            attachment_filename = part['filename']
                            attachment_id = part['body'].get('attachmentId')

                            if attachment_id:
                                # –§–æ—Ä–º–∏—Ä—É–µ–º Gmail URL –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                                attachment_url = f"https://mail.google.com/mail/u/1?ui=2&ik=21f77b88b6&attid={attachment_id}&permmsgid=msg-f:{message_id}&view=att&zw&disp=inline"
                                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–µ: {attachment_filename}")
                                return True

                        # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö parts
                        if 'parts' in part:
                            if find_attachments(part['parts'], depth + 1):
                                return True
                    return False

                if 'parts' in message['payload']:
                    find_attachments(message['payload']['parts'])

            # –°–Ω–∞—á–∞–ª–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            name = contact_info.get('name') or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            if not name or name.strip() == '':
                name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
            file_path = None
            if 'parts' in message['payload']:
                for part in message['payload']['parts']:
                    if part.get('filename'):
                        file_path = await self.download_attachment(
                            message_id, part['body']['attachmentId'], part['filename'], name
                        )
                        break
            email = contact_info.get('email') or ''

            print(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é: name={name}, email={email}")

            # –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é
            async with AsyncSessionLocal() as session:
                vacancy, is_new_vacancy = await self.get_or_create_vacancy(session, vacancy_title)

                application = Application(
                    name=name,
                    email=email,
                    phone=contact_info.get('phone'),
                    file_path=file_path,
                    file_url=attachment_url,
                    attachment_filename=attachment_filename,
                    gmail_message_id=message_id,
                    applicant_message=contact_info.get('message'),
                    vacancy_id=vacancy.id if vacancy else None
                )


                session.add(application)
                try:
                    await session.commit()
                    print(f"‚úÖ –£–°–ü–ï–®–ù–û –°–û–•–†–ê–ù–ï–ù –æ—Ç–∫–ª–∏–∫: {name} - {email} –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏: {vacancy_title}")

                    # Generate summary if application has resume file
                    # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù–û - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –±–æ—Ç–µ
                    # try:
                    #     summary = await self.resume_summary_service.generate_summary_for_application(application, vacancy)
                    #     if summary:
                    #         application.summary = summary
                    #         await session.commit()
                    #         print(f"‚úÖ SUMMARY —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞: {name}")
                    #     else:
                    #         print(f"‚ö†Ô∏è SUMMARY –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ—Ç–∫–ª–∏–∫–∞: {name}")
                    # except Exception as e:
                    #     print(f"‚ùå –û–®–ò–ë–ö–ê –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ summary –¥–ª—è {name}: {e}")

                    return {
                        "success": True,
                        "new_vacancy": is_new_vacancy,
                        "vacancy_title": vacancy_title
                    }

                except IntegrityError as e:
                    await session.rollback()
                    print(f"‚ùå –û—Ç–∫–ª–∏–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {message_id} - {e}")
                    return {"success": False}
                except Exception as e:
                    await session.rollback()
                    print(f"‚ùå –û–®–ò–ë–ö–ê —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
                    print(f"–î–∞–Ω–Ω—ã–µ: name={name}, email={email}, vacancy_id={vacancy.id if vacancy else None}")
                    return {"success": False}

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
            return {"success": False}

    def extract_body(self, payload):
        body = ""

        def extract_from_part(part):
            try:
                if 'data' in part['body'] and part['body']['data']:
                    data = part['body']['data']
                    return base64.urlsafe_b64decode(data).decode('utf-8')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Å—Ç–∏: {e}")
            return ""

        def find_body_recursive(payload_part):
            nonlocal body

            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —ç—Ç–æ–π —á–∞—Å—Ç–∏
            if payload_part.get('mimeType') in ['text/html', 'text/plain']:
                extracted = extract_from_part(payload_part)
                if extracted and len(extracted) > len(body):
                    body = extracted

            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤ –ø–æ–¥—á–∞—Å—Ç—è—Ö
            if 'parts' in payload_part:
                for part in payload_part['parts']:
                    find_body_recursive(part)

        # –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫
        find_body_recursive(payload)

        # DEBUG —Å–æ–æ–±—â–µ–Ω–∏—è —É–±—Ä–∞–Ω—ã

        return body

    def extract_somon_contact_info(self, html_body):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ HTML –ø–∏—Å—å–º–∞ SomonTj"""
        try:
            soup = BeautifulSoup(html_body, 'html.parser')
            text = soup.get_text()

            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
            text = re.sub(r'\s+', ' ', text).strip()

            # print(f"–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞: {text}")  # –£–±–∏—Ä–∞–µ–º –∏–∑ –ª–æ–≥–æ–≤

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
            applicant_message = None
            message_pattern = r'–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\s*(.*?)(?:–ò–º—è:|Email|$)'
            message_match = re.search(message_pattern, text)
            if message_match:
                applicant_message = message_match.group(1).strip()
                # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—Ä–∞–∑—ã
                if '–Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞' in applicant_message:
                    applicant_message = None

            # –ò—â–µ–º –∏–º—è (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
            name = None

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ BeautifulSoup –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ
            try:
                # –ò—â–µ–º –≤—Å–µ <p> —Ç–µ–≥–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                p_tags = soup.find_all('p')
                for p in p_tags:
                    p_text = p.get_text().strip()
                    if p_text.startswith('–ò–º—è:'):
                        name = p_text.replace('–ò–º—è:', '').strip()
                        break
            except:
                pass

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            if not name:
                name_patterns = [
                    # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (—Å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏)
                    r'–ò–º—è:\s*(.+?)(?:\s+Email|\s+–¢–µ–ª–µ—Ñ–æ–Ω|$)',
                    r'–ò–º—è\s*[-:]\s*(.+?)(?:\s+Email|\s+–¢–µ–ª–µ—Ñ–æ–Ω|$)',
                    r'Name:\s*(.+?)(?:\s+Email|\s+–¢–µ–ª–µ—Ñ–æ–Ω|$)',
                    r'–§–ò–û:\s*(.+?)(?:\s+Email|\s+–¢–µ–ª–µ—Ñ–æ–Ω|$)',
                    r'–ü–æ–ª–Ω–æ–µ –∏–º—è:\s*(.+?)(?:\s+Email|\s+–¢–µ–ª–µ—Ñ–æ–Ω|$)',
                    # –í–∞—Ä–∏–∞–Ω—Ç—ã —Å –ª—é–±—ã–º —Ç–µ–∫—Å—Ç–æ–º –º–µ–∂–¥—É "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:" –∏ "–ò–º—è:"
                    r'–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:.*?–ò–º—è:\s*(.+?)(?:\s+Email|\s+–¢–µ–ª–µ—Ñ–æ–Ω|$)',
                    # –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ "–Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"
                    r'–Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞.*?–ò–º—è:\s*(.+?)(?:\s+Email|\s+–¢–µ–ª–µ—Ñ–æ–Ω|$)',
                ]

                for pattern in name_patterns:
                    name_match = re.search(pattern, text, re.MULTILINE | re.DOTALL)
                    if name_match:
                        candidate_name = name_match.group(1).strip()
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∏–º—è (–Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—ã)
                        if len(candidate_name) < 100 and re.search(r'[–ê-–Ø–∞-—èA-Za-z]', candidate_name):
                            name = candidate_name
                            break

            # –ò—â–µ–º email
            email = None
            # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ mailto
            email_links = soup.find_all('a', href=re.compile(r'^mailto:'))
            if email_links:
                email = email_links[0]['href'].replace('mailto:', '')
            else:
                # –ò—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
                email_patterns = [
                    r'Email –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞\s*[-:]\s*(.+?)(?:\n|–¢–µ–ª–µ—Ñ–æ–Ω|$)',
                    r'Email\s*[-:]\s*(.+?)(?:\n|–¢–µ–ª–µ—Ñ–æ–Ω|$)',
                    r'E-mail\s*[-:]\s*(.+?)(?:\n|–¢–µ–ª–µ—Ñ–æ–Ω|$)',
                    r'–ü–æ—á—Ç–∞\s*[-:]\s*(.+?)(?:\n|–¢–µ–ª–µ—Ñ–æ–Ω|$)',
                    r'—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞\s*[-:]\s*(.+?)(?:\n|–¢–µ–ª–µ—Ñ–æ–Ω|$)',
                    # –ü–æ–∏—Å–∫ email –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ –ø–æ—Å–ª–µ "–Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"
                    r'–Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞.*?([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})',
                    # –ü–æ–∏—Å–∫ email –∞–¥—Ä–µ—Å–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
                    r'–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:.*?([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})',
                    r'([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})'
                ]

                for pattern in email_patterns:
                    email_match = re.search(pattern, text, re.MULTILINE | re.DOTALL)
                    if email_match:
                        candidate_email = email_match.group(1).strip()
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π email
                        if '@' in candidate_email and '.' in candidate_email.split('@')[-1]:
                            email = candidate_email
                            break

            # –ò—â–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)
            phone = None

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ BeautifulSoup
            try:
                p_tags = soup.find_all('p')
                for p in p_tags:
                    p_text = p.get_text().strip()
                    if p_text.startswith('–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞'):
                        phone = p_text.replace('–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ -', '').replace('–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:', '').strip()
                        break
            except:
                pass

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
            if not phone:
                phone_patterns = [
                    r'–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞\s*[-:]\s*(.+?)(?:\n|$)',
                    r'–¢–µ–ª–µ—Ñ–æ–Ω\s*[-:]\s*(.+?)(?:\n|$)',
                    r'Phone\s*[-:]\s*(.+?)(?:\n|$)',
                    r'–ú–æ–±\.\s*—Ç–µ–ª\.\s*[-:]\s*(.+?)(?:\n|$)',
                    r'–ú–æ–±–∏–ª—å–Ω—ã–π\s*[-:]\s*(.+?)(?:\n|$)',
                    r'–ù–æ–º–µ—Ä\s*[-:]\s*(.+?)(?:\n|$)',
                    # –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ—Å–ª–µ "–Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"
                    r'–Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞.*?(\+?992[0-9]{9})',
                    r'–Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞.*?(\+?[0-9]{9,15})',
                    # –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ
                    r'–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:.*?(\+?992[0-9]{9})',
                    r'–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:.*?(\+?[0-9]{9,15})',
                    r'(\+?992[0-9]{9})',
                    r'(\+?[0-9]{9,15})'
                ]

                for pattern in phone_patterns:
                    phone_match = re.search(pattern, text, re.MULTILINE | re.DOTALL)
                    if phone_match:
                        candidate_phone = phone_match.group(1).strip()
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω
                        if re.search(r'[0-9+]', candidate_phone) and len(candidate_phone.replace(' ', '').replace('-', '').replace('+', '')) >= 9:
                            phone = candidate_phone
                            break

            result = {
                'name': name,
                'email': email,
                'phone': phone,
                'message': applicant_message
            }

            # –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–±—Ä–∞–Ω—ã

            return result

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HTML: {e}")
            return {'name': None, 'email': None, 'phone': None}

    def extract_vacancy_title(self, subject):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        if ' - ' in subject:
            return subject.split(' - ', 1)[1].strip()
        return subject.replace('–û—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é', '').strip()

    async def get_or_create_vacancy(self, session, title):
        """–ù–∞—Ö–æ–¥–∏—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é"""
        try:
            from sqlalchemy import select
            stmt = select(Vacancy).where(Vacancy.title == title)
            result = await session.execute(stmt)
            vacancy = result.scalar_one_or_none()

            is_new_vacancy = False
            if not vacancy:
                vacancy = Vacancy(title=title, description=f"–í–∞–∫–∞–Ω—Å–∏—è —Å —Å–∞–π—Ç–∞ SomonTj: {title}")
                session.add(vacancy)
                await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –±–µ–∑ –∫–æ–º–º–∏—Ç–∞
                print(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è: {title}")
                is_new_vacancy = True

            return vacancy, is_new_vacancy
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –≤–∞–∫–∞–Ω—Å–∏–µ–π: {e}")
            return None, False

    def extract_name(self, from_email, body):
        name_match = re.search(r'([–ê-–Ø–∞-—è]+\s+[–ê-–Ø–∞-—è]+)', body)
        if name_match:
            return name_match.group(1)

        email_name = re.search(r'(.+?)\s*<', from_email)
        if email_name:
            return email_name.group(1).strip()

        return from_email.split('@')[0]

