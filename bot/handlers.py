from aiogram import Dispatcher
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters.callback_data import CallbackData
from sqlalchemy import desc, select
import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from shared.database.database import AsyncSessionLocal
from shared.models.vacancy import Application, Vacancy

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏ —Ä–µ–∑—é–º–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_resume_messages = {}

class VacancyCallback(CallbackData, prefix="vacancy"):
    vacancy_id: int

class ApplicationCallback(CallbackData, prefix="application"):
    application_id: int

class ProcessCallback(CallbackData, prefix="process"):
    application_id: int
    action: str  # "mark_processed" –∏–ª–∏ "mark_unprocessed"

class BackCallback(CallbackData, prefix="back"):
    to: str  # "vacancies" –∏–ª–∏ "applications"
    vacancy_id: int = 0  # –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏

async def delete_message_after_delay(message, delay_seconds):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥"""
    import asyncio
    await asyncio.sleep(delay_seconds)
    try:
        await message.delete()
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

def setup_handlers(dp: Dispatcher):

    @dp.message(CommandStart())
    async def command_start_handler(message: Message) -> None:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø HR-–±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ Gmail.\n\n"
                           "–ö–æ–º–∞–Ω–¥—ã:\n"
                           "/start - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                           "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–∫–ª–∏–∫–∞–º\n"
                           "/recent - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∏\n"
                           "/parse - –ü–∞—Ä—Å–∏—Ç—å –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞")

    @dp.message(Command("stats"))
    async def stats_handler(message: Message) -> None:
        async with AsyncSessionLocal() as session:
            from sqlalchemy import text
            total = await session.execute(text("SELECT COUNT(*) FROM applications"))
            total_count = total.scalar()

            processed = await session.execute(text("SELECT COUNT(*) FROM applications WHERE is_processed = true"))
            processed_count = processed.scalar()

            unprocessed = total_count - processed_count

            await message.answer(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"–í—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–æ–≤: <b>{total_count}</b>\n"
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{processed_count}</b>\n"
                f"–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{unprocessed}</b>",
                parse_mode="HTML"
            )

    @dp.message(Command("recent"))
    async def recent_handler(message: Message) -> None:
        async with AsyncSessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—Ç–∫–ª–∏–∫–æ–≤
            stmt = select(Vacancy).order_by(desc(Vacancy.created_at))
            result = await session.execute(stmt)
            vacancies = result.scalars().all()

            if not vacancies:
                await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π")
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])

            for vacancy in vacancies:
                # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
                count_stmt = select(Application).where(Application.vacancy_id == vacancy.id)
                count_result = await session.execute(count_stmt)
                applications_count = len(count_result.scalars().all())

                button_text = f"{vacancy.title} ({applications_count} –æ—Ç–∫–ª–∏–∫–æ–≤)"
                button = InlineKeyboardButton(
                    text=button_text,
                    callback_data=VacancyCallback(vacancy_id=vacancy.id).pack()
                )
                keyboard.inline_keyboard.append([button])

            await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∫–ª–∏–∫–æ–≤:", reply_markup=keyboard)

    @dp.message(Command("parse"))
    async def parse_handler(message: Message) -> None:
        await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º...")

        try:
            from bot.gmail_parser import GmailParser
            parser = GmailParser()

            # –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞
            result = await parser.parse_new_emails()

            if result["parsed_count"] > 0:
                text = f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤: <b>{result['parsed_count']}</b>"

                if result["new_vacancies"]:
                    text += f"\n\n<b>–ù–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ ({len(result['new_vacancies'])}):</b>"
                    for vacancy in result["new_vacancies"]:
                        text += f"\n‚Ä¢ {vacancy}"

                await message.answer(text, parse_mode="HTML")
            else:
                await message.answer("üì≠ –ù–æ–≤—ã—Ö –ø–∏—Å–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        except Exception as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}")

    @dp.callback_query(VacancyCallback.filter())
    async def vacancy_applications_handler(query: CallbackQuery, callback_data: VacancyCallback) -> None:
        await query.answer()

        async with AsyncSessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é
            vacancy_stmt = select(Vacancy).where(Vacancy.id == callback_data.vacancy_id)
            vacancy_result = await session.execute(vacancy_stmt)
            vacancy = vacancy_result.scalar_one_or_none()

            if not vacancy:
                await query.message.edit_text("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é
            apps_stmt = select(Application).where(Application.vacancy_id == callback_data.vacancy_id).order_by(desc(Application.created_at))
            apps_result = await session.execute(apps_stmt)
            applications = apps_result.scalars().all()

            if not applications:
                await query.message.edit_text(f"üìã –í–∞–∫–∞–Ω—Å–∏—è: {vacancy.title}\n\n–û—Ç–∫–ª–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–∫–ª–∏–∫–∞–º–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])

            for app in applications:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: {–∏–º—è} - {—Ç–µ–ª–µ—Ñ–æ–Ω} - {email}
                button_text = app.name
                if app.phone:
                    button_text += f" - {app.phone}"
                if app.email:
                    button_text += f" - {app.email}"

                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
                status = "‚úÖ" if app.is_processed else "‚ùå"
                button_text = f"{status} {button_text}"

                button = InlineKeyboardButton(
                    text=button_text,
                    callback_data=ApplicationCallback(application_id=app.id).pack()
                )
                keyboard.inline_keyboard.append([button])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º"
            back_button = InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º",
                callback_data=BackCallback(to="vacancies").pack()
            )
            keyboard.inline_keyboard.append([back_button])

            text = f"üìã –í–∞–∫–∞–Ω—Å–∏—è: <b>{vacancy.title}</b>\n"
            text += f"üìä –í—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–æ–≤: <b>{len(applications)}</b>\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∫–ª–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:"

            await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

    @dp.callback_query(ApplicationCallback.filter())
    async def application_details_handler(query: CallbackQuery, callback_data: ApplicationCallback) -> None:
        await query.answer()

        async with AsyncSessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫–ª–∏–∫
            app_stmt = select(Application).where(Application.id == callback_data.application_id)
            app_result = await session.execute(app_stmt)
            application = app_result.scalar_one_or_none()

            if not application:
                await query.message.edit_text("–û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é
            vacancy_stmt = select(Vacancy).where(Vacancy.id == application.vacancy_id)
            vacancy_result = await session.execute(vacancy_stmt)
            vacancy = vacancy_result.scalar_one_or_none()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            status = "‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω" if application.is_processed else "‚ùå –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"

            text = f"üë§ <b>{application.name}</b>\n\n"
            text += f"üìã –í–∞–∫–∞–Ω—Å–∏—è: {vacancy.title if vacancy else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            text += f"üìß Email: {application.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {application.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            text += f"üè∑Ô∏è –°—Ç–∞—Ç—É—Å: {status}\n"
            text += f"üìÖ –î–∞—Ç–∞ –æ—Ç–∫–ª–∏–∫–∞: {application.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"

            if application.applicant_message:
                text += f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:</b>\n{application.applicant_message}\n\n"

            if application.attachment_filename:
                text += f"üìé <b>–í–ª–æ–∂–µ–Ω–∏–µ:</b> {application.attachment_filename}\n"
                if application.file_url:
                    text += f"üîó <a href='{application.file_url}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª</a>\n\n"

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])
            if application.is_processed:
                process_button = InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É",
                    callback_data=ProcessCallback(application_id=application.id, action="mark_unprocessed").pack()
                )
            else:
                process_button = InlineKeyboardButton(
                    text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π",
                    callback_data=ProcessCallback(application_id=application.id, action="mark_processed").pack()
                )
            keyboard.inline_keyboard.append([process_button])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –æ—Ç–∫–ª–∏–∫–∞–º"
            back_button = InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ—Ç–∫–ª–∏–∫–∞–º",
                callback_data=BackCallback(to="applications", vacancy_id=application.vacancy_id).pack()
            )
            keyboard.inline_keyboard.append([back_button])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            await query.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
            user_id = query.from_user.id
            if application.file_path and os.path.exists(application.file_path):
                try:
                    from aiogram.types import FSInputFile
                    file = FSInputFile(application.file_path, filename=application.attachment_filename)
                    file_msg = await query.message.answer_document(file, caption=f"üìé –†–µ–∑—é–º–µ –æ—Ç {application.name}")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º
                    user_resume_messages[user_id] = file_msg.message_id
                except Exception as e:
                    error_msg = await query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
                    user_resume_messages[user_id] = error_msg.message_id
            elif application.file_url:
                url_msg = await query.message.answer(f"üìé –§–∞–π–ª –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ: {application.file_url}")
                user_resume_messages[user_id] = url_msg.message_id

    @dp.callback_query(ProcessCallback.filter())
    async def process_status_handler(query: CallbackQuery, callback_data: ProcessCallback) -> None:
        await query.answer()

        async with AsyncSessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫–ª–∏–∫
            app_stmt = select(Application).where(Application.id == callback_data.application_id)
            app_result = await session.execute(app_stmt)
            application = app_result.scalar_one_or_none()

            if not application:
                await query.message.edit_text("‚ùå –û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if callback_data.action == "mark_processed":
                application.is_processed = True
                status_message = "‚úÖ –û—Ç–∫–ª–∏–∫ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π"
            elif callback_data.action == "mark_unprocessed":
                application.is_processed = False
                status_message = "‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await session.commit()

            # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            vacancy_stmt = select(Vacancy).where(Vacancy.id == application.vacancy_id)
            vacancy_result = await session.execute(vacancy_stmt)
            vacancy = vacancy_result.scalar_one_or_none()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            status = "‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω" if application.is_processed else "‚ùå –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"

            text = f"üë§ <b>{application.name}</b>\n\n"
            text += f"üìã –í–∞–∫–∞–Ω—Å–∏—è: {vacancy.title if vacancy else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            text += f"üìß Email: {application.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {application.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            text += f"üè∑Ô∏è –°—Ç–∞—Ç—É—Å: {status}\n"
            text += f"üìÖ –î–∞—Ç–∞ –æ—Ç–∫–ª–∏–∫–∞: {application.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"

            if application.applicant_message:
                text += f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:</b>\n{application.applicant_message}\n\n"

            if application.attachment_filename:
                text += f"üìé <b>–í–ª–æ–∂–µ–Ω–∏–µ:</b> {application.attachment_filename}\n"
                if application.file_url:
                    text += f"üîó <a href='{application.file_url}'>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª</a>\n\n"

            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])
            if application.is_processed:
                process_button = InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É",
                    callback_data=ProcessCallback(application_id=application.id, action="mark_unprocessed").pack()
                )
            else:
                process_button = InlineKeyboardButton(
                    text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π",
                    callback_data=ProcessCallback(application_id=application.id, action="mark_processed").pack()
                )
            keyboard.inline_keyboard.append([process_button])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –æ—Ç–∫–ª–∏–∫–∞–º"
            back_button = InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ—Ç–∫–ª–∏–∫–∞–º",
                callback_data=BackCallback(to="applications", vacancy_id=application.vacancy_id).pack()
            )
            keyboard.inline_keyboard.append([back_button])

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
            status_msg = await query.message.answer(status_message)

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            import asyncio
            asyncio.create_task(delete_message_after_delay(status_msg, 1))

    @dp.callback_query(BackCallback.filter())
    async def back_handler(query: CallbackQuery, callback_data: BackCallback) -> None:
        await query.answer()

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º —Ä–µ–∑—é–º–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        user_id = query.from_user.id
        if user_id in user_resume_messages:
            try:
                await query.bot.delete_message(chat_id=query.message.chat.id, message_id=user_resume_messages[user_id])
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
            del user_resume_messages[user_id]

        if callback_data.to == "vacancies":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–∞–∫–∞–Ω—Å–∏–π
            async with AsyncSessionLocal() as session:
                stmt = select(Vacancy).order_by(desc(Vacancy.created_at))
                result = await session.execute(stmt)
                vacancies = result.scalars().all()

                if not vacancies:
                    await query.message.edit_text("–ü–æ–∫–∞ –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π")
                    return

                keyboard = InlineKeyboardMarkup(inline_keyboard=[])

                for vacancy in vacancies:
                    count_stmt = select(Application).where(Application.vacancy_id == vacancy.id)
                    count_result = await session.execute(count_stmt)
                    applications_count = len(count_result.scalars().all())

                    button_text = f"{vacancy.title} ({applications_count} –æ—Ç–∫–ª–∏–∫–æ–≤)"
                    button = InlineKeyboardButton(
                        text=button_text,
                        callback_data=VacancyCallback(vacancy_id=vacancy.id).pack()
                    )
                    keyboard.inline_keyboard.append([button])

                await query.message.edit_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∫–ª–∏–∫–æ–≤:", reply_markup=keyboard)

        elif callback_data.to == "applications":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –æ—Ç–∫–ª–∏–∫–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
            async with AsyncSessionLocal() as session:
                vacancy_stmt = select(Vacancy).where(Vacancy.id == callback_data.vacancy_id)
                vacancy_result = await session.execute(vacancy_stmt)
                vacancy = vacancy_result.scalar_one_or_none()

                if not vacancy:
                    await query.message.edit_text("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return

                apps_stmt = select(Application).where(Application.vacancy_id == callback_data.vacancy_id).order_by(desc(Application.created_at))
                apps_result = await session.execute(apps_stmt)
                applications = apps_result.scalars().all()

                if not applications:
                    await query.message.edit_text(f"üìã –í–∞–∫–∞–Ω—Å–∏—è: {vacancy.title}\n\n–û—Ç–∫–ª–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
                    return

                keyboard = InlineKeyboardMarkup(inline_keyboard=[])

                for app in applications:
                    button_text = app.name
                    if app.phone:
                        button_text += f" - {app.phone}"
                    if app.email:
                        button_text += f" - {app.email}"

                    status = "‚úÖ" if app.is_processed else "‚ùå"
                    button_text = f"{status} {button_text}"

                    button = InlineKeyboardButton(
                        text=button_text,
                        callback_data=ApplicationCallback(application_id=app.id).pack()
                    )
                    keyboard.inline_keyboard.append([button])

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º"
                back_button = InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º",
                    callback_data=BackCallback(to="vacancies").pack()
                )
                keyboard.inline_keyboard.append([back_button])

                text = f"üìã –í–∞–∫–∞–Ω—Å–∏—è: <b>{vacancy.title}</b>\n"
                text += f"üìä –í—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–æ–≤: <b>{len(applications)}</b>\n\n"
                text += "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∫–ª–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:"

                await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")