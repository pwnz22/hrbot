from aiogram import Dispatcher
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters.callback_data import CallbackData
from sqlalchemy import desc, select
import sys
import os

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from shared.database.database import AsyncSessionLocal
from shared.models.vacancy import Application, Vacancy
from shared.services.resume_summary_service import ResumeSummaryService

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–∞–π–ª–∞–º–∏ —Ä–µ–∑—é–º–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_resume_messages = {}

class VacancyCallback(CallbackData, prefix="vacancy"):
    vacancy_id: int

class ApplicationCallback(CallbackData, prefix="application"):
    application_id: int
    source: str = "recent"  # "recent", "unprocessed" –∏–ª–∏ "vacancy"

class ProcessCallback(CallbackData, prefix="process"):
    application_id: int
    action: str  # "mark_processed" –∏–ª–∏ "mark_unprocessed"

class BackCallback(CallbackData, prefix="back"):
    to: str  # "vacancies", "applications" –∏–ª–∏ "unprocessed"
    vacancy_id: int = 0  # –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏

class DeleteCallback(CallbackData, prefix="delete"):
    application_id: int
    action: str  # "confirm" –∏–ª–∏ "cancel"
    source: str = "recent"  # –û—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å

class SummaryCallback(CallbackData, prefix="summary"):
    application_id: int
    action: str  # "generate"

class ResumeCallback(CallbackData, prefix="resume"):
    application_id: int
    action: str  # "download"

class AccountCallback(CallbackData, prefix="account"):
    account_id: str

class AccountToggleCallback(CallbackData, prefix="account_toggle"):
    account_id: str
    action: str  # "enable" –∏–ª–∏ "disable"

async def delete_message_after_delay(message, delay_seconds):
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥"""
    import asyncio
    await asyncio.sleep(delay_seconds)
    try:
        await message.delete()
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

def clean_html_tags(text):
    """–£–¥–∞–ª—è–µ—Ç HTML —Ç–µ–≥–∏ –∏ —ç–º–æ–¥–∑–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Excel"""
    if not text:
        return ""

    import re
    # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
    text = re.sub(r'<[^>]+>', '', text)
    # –£–¥–∞–ª—è–µ–º —ç–º–æ–¥–∑–∏ (–±–∞–∑–æ–≤—ã–µ)
    text = re.sub(r'[üìãüë§üìßüì±üîóüìùüõ†‚è∞üéì‚ö†Ô∏èüìäü§ñüìÑ]', '', text)
    # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
    text = re.sub(r'\s+', ' ', text)
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
    text = text.strip()
    return text

def setup_handlers(dp: Dispatcher):

    @dp.message(CommandStart())
    async def command_start_handler(message: Message) -> None:
        from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="/recent"), KeyboardButton(text="/unprocessed")],
                [KeyboardButton(text="/parse"), KeyboardButton(text="/stats")],
                [KeyboardButton(text="/accounts"), KeyboardButton(text="/add_account")],
                [KeyboardButton(text="/export")]
            ],
            resize_keyboard=True
        )

        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø HR-–±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ Gmail.\n\n"
                           "–ö–æ–º–∞–Ω–¥—ã:\n"
                           "/start - –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                           "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–∫–ª–∏–∫–∞–º\n"
                           "/recent - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∫–ª–∏–∫–∏\n"
                           "/unprocessed - –í—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏\n"
                           "/parse - –ü–∞—Ä—Å–∏—Ç—å –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞\n"
                           "/export - –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–∫–ª–∏–∫–æ–≤ –≤ Excel\n"
                           "/accounts - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Gmail –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏\n"
                           "/add_account - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π Gmail –∞–∫–∫–∞—É–Ω—Ç",
                           reply_markup=keyboard)

    @dp.message(Command("stats"))
    async def stats_handler(message: Message) -> None:
        async with AsyncSessionLocal() as session:
            from sqlalchemy import text
            total = await session.execute(text("SELECT COUNT(*) FROM applications WHERE deleted_at IS NULL"))
            total_count = total.scalar()

            processed = await session.execute(text("SELECT COUNT(*) FROM applications WHERE is_processed = true AND deleted_at IS NULL"))
            processed_count = processed.scalar()

            unprocessed = total_count - processed_count

            await message.answer(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"–í—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–æ–≤: <b>{total_count}</b>\n"
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{processed_count}</b>\n"
                f"–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{unprocessed}</b>",
                parse_mode="HTML"
            )

    @dp.message(Command("recent"))
    async def recent_handler(message: Message) -> None:
        async with AsyncSessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—Ç–∫–ª–∏–∫–æ–≤
            stmt = select(Vacancy).order_by(desc(Vacancy.created_at))
            result = await session.execute(stmt)
            vacancies = result.scalars().all()

            if not vacancies:
                await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π")
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])

            for vacancy in vacancies:
                # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ (–∏—Å–∫–ª—é—á–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ)
                count_stmt = select(Application).where(Application.vacancy_id == vacancy.id, Application.deleted_at.is_(None))
                count_result = await session.execute(count_stmt)
                applications_count = len(count_result.scalars().all())

                button_text = f"{vacancy.title} ({applications_count} –æ—Ç–∫–ª–∏–∫–æ–≤)"
                button = InlineKeyboardButton(
                    text=button_text,
                    callback_data=VacancyCallback(vacancy_id=vacancy.id).pack()
                )
                keyboard.inline_keyboard.append([button])

            await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∫–ª–∏–∫–æ–≤:", reply_markup=keyboard)

    @dp.message(Command("parse"))
    async def parse_handler(message: Message) -> None:
        status_msg = await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –Ω–æ–≤—ã—Ö –ø–∏—Å–µ–º –∏–∑ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")

        try:
            import json
            import os
            from bot.gmail_parser import GmailParser

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            accounts_config_path = "bot/gmail_accounts.json"
            parsers = []

            if os.path.exists(accounts_config_path):
                with open(accounts_config_path, 'r', encoding='utf-8') as f:
                    accounts = json.load(f)

                for account in accounts:
                    if account.get('enabled', True):
                        parser = GmailParser(
                            account_id=account['id'],
                            credentials_path=account['credentials_path'],
                            token_path=account['token_path']
                        )
                        parsers.append(parser)
            else:
                # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
                parsers = [GmailParser()]

            # –ü–∞—Ä—Å–∏–º –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞ –∏–∑ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
            total_parsed = 0
            all_new_vacancies = []

            for parser in parsers:
                result = await parser.parse_new_emails()
                total_parsed += result["parsed_count"]

                if result["new_vacancies"]:
                    all_new_vacancies.extend(result["new_vacancies"])

            if total_parsed > 0:
                text = f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–æ–≤—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤: <b>{total_parsed}</b>"

                if all_new_vacancies:
                    unique_vacancies = list(set(all_new_vacancies))
                    text += f"\n\n<b>–ù–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ ({len(unique_vacancies)}):</b>"
                    for vacancy in unique_vacancies:
                        text += f"\n‚Ä¢ {vacancy}"

                await status_msg.edit_text(text, parse_mode="HTML")
            else:
                await status_msg.edit_text("üì≠ –ù–æ–≤—ã—Ö –ø–∏—Å–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            import asyncio
            asyncio.create_task(delete_message_after_delay(status_msg, 2))
            asyncio.create_task(delete_message_after_delay(message, 2))

        except Exception as e:
            await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}")
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–æ–π —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
            import asyncio
            asyncio.create_task(delete_message_after_delay(status_msg, 2))
            asyncio.create_task(delete_message_after_delay(message, 2))

    @dp.message(Command("unprocessed"))
    async def unprocessed_handler(message: Message) -> None:
        async with AsyncSessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏ —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ (–∏—Å–∫–ª—é—á–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ)
            from sqlalchemy.orm import selectinload
            stmt = select(Application).options(selectinload(Application.vacancy)).where(Application.is_processed == False, Application.deleted_at.is_(None)).order_by(desc(Application.created_at))
            result = await session.execute(stmt)
            unprocessed_applications = result.scalars().all()

            if not unprocessed_applications:
                await message.answer("‚úÖ –í—Å–µ –æ—Ç–∫–ª–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º–∏ –æ—Ç–∫–ª–∏–∫–∞–º–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])

            for app in unprocessed_applications:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: {–∏–º—è} - {—Ç–µ–ª–µ—Ñ–æ–Ω} - {email}
                button_text = app.name
                if app.phone:
                    button_text += f" - {app.phone}"
                if app.email:
                    button_text += f" - {app.email}"

                # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
                button_text = f"‚ùå {button_text}"

                button = InlineKeyboardButton(
                    text=button_text,
                    callback_data=ApplicationCallback(application_id=app.id, source="unprocessed").pack()
                )
                keyboard.inline_keyboard.append([button])

            text = f"‚ùå <b>–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏ ({len(unprocessed_applications)}):</b>\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∫–ª–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏:"

            await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    @dp.callback_query(VacancyCallback.filter())
    async def vacancy_applications_handler(query: CallbackQuery, callback_data: VacancyCallback) -> None:
        await query.answer()

        async with AsyncSessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é
            vacancy_stmt = select(Vacancy).where(Vacancy.id == callback_data.vacancy_id)
            vacancy_result = await session.execute(vacancy_stmt)
            vacancy = vacancy_result.scalar_one_or_none()

            if not vacancy:
                await query.message.edit_text("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫–ª–∏–∫–∏ –Ω–∞ —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é (–∏—Å–∫–ª—é—á–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ)
            apps_stmt = select(Application).where(Application.vacancy_id == callback_data.vacancy_id, Application.deleted_at.is_(None)).order_by(desc(Application.created_at))
            apps_result = await session.execute(apps_stmt)
            applications = apps_result.scalars().all()

            if not applications:
                await query.message.edit_text(f"üìã –í–∞–∫–∞–Ω—Å–∏—è: {vacancy.title}\n\n–û—Ç–∫–ª–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
                return

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–∫–ª–∏–∫–∞–º–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])

            for app in applications:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: {–∏–º—è} - {—Ç–µ–ª–µ—Ñ–æ–Ω} - {email}
                button_text = app.name
                if app.phone:
                    button_text += f" - {app.phone}"
                if app.email:
                    button_text += f" - {app.email}"

                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
                status = "‚úÖ" if app.is_processed else "‚ùå"
                button_text = f"{status} {button_text}"

                button = InlineKeyboardButton(
                    text=button_text,
                    callback_data=ApplicationCallback(application_id=app.id, source="vacancy").pack()
                )
                keyboard.inline_keyboard.append([button])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º"
            back_button = InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º",
                callback_data=BackCallback(to="vacancies").pack()
            )
            keyboard.inline_keyboard.append([back_button])

            text = f"üìã –í–∞–∫–∞–Ω—Å–∏—è: <b>{vacancy.title}</b>\n"
            text += f"üìä –í—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–æ–≤: <b>{len(applications)}</b>\n\n"
            text += "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∫–ª–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:"

            await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

    @dp.callback_query(ApplicationCallback.filter())
    async def application_details_handler(query: CallbackQuery, callback_data: ApplicationCallback) -> None:
        await query.answer()

        async with AsyncSessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫–ª–∏–∫
            app_stmt = select(Application).where(Application.id == callback_data.application_id)
            app_result = await session.execute(app_stmt)
            application = app_result.scalar_one_or_none()

            if not application:
                await query.message.edit_text("–û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é
            vacancy_stmt = select(Vacancy).where(Vacancy.id == application.vacancy_id)
            vacancy_result = await session.execute(vacancy_stmt)
            vacancy = vacancy_result.scalar_one_or_none()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            status = "‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω" if application.is_processed else "‚ùå –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"

            text = f"üë§ <b>{application.name}</b>\n\n"
            text += f"üìã –í–∞–∫–∞–Ω—Å–∏—è: {vacancy.title if vacancy else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            text += f"üìß Email: {application.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {application.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            text += f"üè∑Ô∏è –°—Ç–∞—Ç—É—Å: {status}\n"
            text += f"üìÖ –î–∞—Ç–∞ –æ—Ç–∫–ª–∏–∫–∞: {application.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"

            if application.applicant_message:
                text += f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:</b>\n{application.applicant_message}\n\n"


            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])
            if application.is_processed:
                process_button = InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É",
                    callback_data=ProcessCallback(application_id=application.id, action="mark_unprocessed").pack()
                )
            else:
                process_button = InlineKeyboardButton(
                    text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π",
                    callback_data=ProcessCallback(application_id=application.id, action="mark_processed").pack()
                )
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
            delete_button = InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ—Ç–∫–ª–∏–∫",
                callback_data=DeleteCallback(application_id=application.id, action="confirm", source=callback_data.source).pack()
            )
            keyboard.inline_keyboard.append([process_button, delete_button])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑—é–º–µ –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª
            if (application.file_path or application.attachment_filename) and (
                application.attachment_filename and
                (application.attachment_filename.lower().endswith('.pdf') or application.attachment_filename.lower().endswith('.docx'))
            ):
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å summary
                if application.summary:
                    # –ï—Å–ª–∏ summary —É–∂–µ –µ—Å—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                    summary_button = InlineKeyboardButton(
                        text="üìä –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ",
                        callback_data=SummaryCallback(application_id=application.id, action="show").pack()
                    )
                else:
                    # –ï—Å–ª–∏ summary –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    summary_button = InlineKeyboardButton(
                        text="ü§ñ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ",
                        callback_data=SummaryCallback(application_id=application.id, action="generate").pack()
                    )
                keyboard.inline_keyboard.append([summary_button])

                # –ö–Ω–æ–ø–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Ä–µ–∑—é–º–µ
                resume_button = InlineKeyboardButton(
                    text="üìÑ –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª —Ä–µ–∑—é–º–µ",
                    callback_data=ResumeCallback(application_id=application.id, action="download").pack()
                )
                keyboard.inline_keyboard.append([resume_button])

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
            if callback_data.source == "unprocessed":
                back_button = InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º",
                    callback_data=BackCallback(to="unprocessed").pack()
                )
            elif callback_data.source == "vacancy":
                back_button = InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ—Ç–∫–ª–∏–∫–∞–º",
                    callback_data=BackCallback(to="applications", vacancy_id=application.vacancy_id).pack()
                )
            else:  # source == "recent" –∏–ª–∏ –¥—Ä—É–≥–æ–µ
                back_button = InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º",
                    callback_data=BackCallback(to="vacancies").pack()
                )
            keyboard.inline_keyboard.append([back_button])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            await query.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)

    @dp.callback_query(ProcessCallback.filter())
    async def process_status_handler(query: CallbackQuery, callback_data: ProcessCallback) -> None:
        await query.answer()

        async with AsyncSessionLocal() as session:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫–ª–∏–∫
            app_stmt = select(Application).where(Application.id == callback_data.application_id)
            app_result = await session.execute(app_stmt)
            application = app_result.scalar_one_or_none()

            if not application:
                await query.message.edit_text("‚ùå –û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if callback_data.action == "mark_processed":
                application.is_processed = True
                status_message = "‚úÖ –û—Ç–∫–ª–∏–∫ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π"
            elif callback_data.action == "mark_unprocessed":
                application.is_processed = False
                status_message = "‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞"

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await session.commit()

            # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            vacancy_stmt = select(Vacancy).where(Vacancy.id == application.vacancy_id)
            vacancy_result = await session.execute(vacancy_stmt)
            vacancy = vacancy_result.scalar_one_or_none()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            status = "‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω" if application.is_processed else "‚ùå –ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"

            text = f"üë§ <b>{application.name}</b>\n\n"
            text += f"üìã –í–∞–∫–∞–Ω—Å–∏—è: {vacancy.title if vacancy else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n"
            text += f"üìß Email: {application.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            text += f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {application.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            text += f"üè∑Ô∏è –°—Ç–∞—Ç—É—Å: {status}\n"
            text += f"üìÖ –î–∞—Ç–∞ –æ—Ç–∫–ª–∏–∫–∞: {application.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"

            if application.applicant_message:
                text += f"üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞:</b>\n{application.applicant_message}\n\n"


            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])
            if application.is_processed:
                process_button = InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É",
                    callback_data=ProcessCallback(application_id=application.id, action="mark_unprocessed").pack()
                )
            else:
                process_button = InlineKeyboardButton(
                    text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π",
                    callback_data=ProcessCallback(application_id=application.id, action="mark_processed").pack()
                )
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
            delete_button = InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ—Ç–∫–ª–∏–∫",
                callback_data=DeleteCallback(application_id=application.id, action="confirm", source="vacancy").pack()
            )
            keyboard.inline_keyboard.append([process_button, delete_button])

            # –ü–æ–ª—É—á–∞–µ–º source –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ callback (–Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å —á–µ—Ä–µ–∑ ProcessCallback)
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º applications –∫–∞–∫ fallback
            back_button = InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –æ—Ç–∫–ª–∏–∫–∞–º",
                callback_data=BackCallback(to="applications", vacancy_id=application.vacancy_id).pack()
            )
            keyboard.inline_keyboard.append([back_button])

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await query.message.edit_text(text, parse_mode="HTML", reply_markup=keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
            status_msg = await query.message.answer(status_message)

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            import asyncio
            asyncio.create_task(delete_message_after_delay(status_msg, 1))

    @dp.callback_query(DeleteCallback.filter())
    async def delete_handler(query: CallbackQuery, callback_data: DeleteCallback) -> None:
        await query.answer()

        if callback_data.action == "confirm":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            async with AsyncSessionLocal() as session:
                app_stmt = select(Application).where(Application.id == callback_data.application_id)
                app_result = await session.execute(app_stmt)
                application = app_result.scalar_one_or_none()

                if not application:
                    await query.message.edit_text("‚ùå –û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                            callback_data=DeleteCallback(application_id=application.id, action="execute", source=callback_data.source).pack()
                        ),
                        InlineKeyboardButton(
                            text="‚ùå –û—Ç–º–µ–Ω–∞",
                            callback_data=DeleteCallback(application_id=application.id, action="cancel", source=callback_data.source).pack()
                        )
                    ]
                ])

                text = f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
                text += f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ç–∫–ª–∏–∫?\n\n"
                text += f"üë§ <b>{application.name}</b>\n"
                if application.email:
                    text += f"üìß {application.email}\n"
                if application.phone:
                    text += f"üì± {application.phone}\n"
                text += f"\n‚ùó <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</b>"

                await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

        elif callback_data.action == "execute":
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º —Ä–µ–∑—é–º–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            user_id = query.from_user.id
            if user_id in user_resume_messages:
                try:
                    await query.bot.delete_message(chat_id=query.message.chat.id, message_id=user_resume_messages[user_id])
                except Exception:
                    pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
                del user_resume_messages[user_id]

            # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
            async with AsyncSessionLocal() as session:
                app_stmt = select(Application).where(Application.id == callback_data.application_id)
                app_result = await session.execute(app_stmt)
                application = app_result.scalar_one_or_none()

                if not application:
                    await query.message.edit_text("‚ùå –û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return

                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if application.file_path and os.path.exists(application.file_path):
                    try:
                        os.remove(application.file_path)
                        print(f"–£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {application.file_path}")
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º soft delete –≤–º–µ—Å—Ç–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                from datetime import datetime
                application.deleted_at = datetime.now()
                await session.commit()

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
                await query.message.edit_text(
                    f"‚úÖ –û—Ç–∫–ª–∏–∫ –æ—Ç <b>{application.name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω",
                    parse_mode="HTML"
                )

                # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –º–µ–Ω—é
                import asyncio
                await asyncio.sleep(1)

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞
                if callback_data.source == "unprocessed":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤
                    async with AsyncSessionLocal() as session:
                        from sqlalchemy.orm import selectinload
                        stmt = select(Application).options(selectinload(Application.vacancy)).where(Application.is_processed == False, Application.deleted_at.is_(None)).order_by(desc(Application.created_at))
                        result = await session.execute(stmt)
                        unprocessed_applications = result.scalars().all()

                        if not unprocessed_applications:
                            await query.message.edit_text("‚úÖ –í—Å–µ –æ—Ç–∫–ª–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!", parse_mode="HTML")
                            return

                        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

                        for app in unprocessed_applications:
                            button_text = app.name
                            if app.phone:
                                button_text += f" - {app.phone}"
                            if app.email:
                                button_text += f" - {app.email}"

                            button_text = f"‚ùå {button_text}"

                            button = InlineKeyboardButton(
                                text=button_text,
                                callback_data=ApplicationCallback(application_id=app.id, source="unprocessed").pack()
                            )
                            keyboard.inline_keyboard.append([button])

                        text = f"‚ùå <b>–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏ ({len(unprocessed_applications)}):</b>\n\n"
                        text += "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∫–ª–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏:"

                        await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

                elif callback_data.source == "vacancy":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –æ—Ç–∫–ª–∏–∫–æ–≤ –≤–∞–∫–∞–Ω—Å–∏–∏
                    back_callback = BackCallback(to="applications", vacancy_id=application.vacancy_id)
                    await back_handler(query, back_callback)

                else:  # source == "recent" –∏–ª–∏ –¥—Ä—É–≥–æ–µ
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–∞–∫–∞–Ω—Å–∏–π
                    back_callback = BackCallback(to="vacancies")
                    await back_handler(query, back_callback)

        elif callback_data.action == "cancel":
            # –û—Ç–º–µ–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–º—É –ø—Ä–æ—Å–º–æ—Ç—Ä—É
            application_callback = ApplicationCallback(application_id=callback_data.application_id, source=callback_data.source)
            await application_details_handler(query, application_callback)

    @dp.callback_query(BackCallback.filter())
    async def back_handler(query: CallbackQuery, callback_data: BackCallback) -> None:
        await query.answer()

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º —Ä–µ–∑—é–º–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        user_id = query.from_user.id
        if user_id in user_resume_messages:
            try:
                await query.bot.delete_message(chat_id=query.message.chat.id, message_id=user_resume_messages[user_id])
            except Exception:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
            del user_resume_messages[user_id]

        if callback_data.to == "vacancies":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –≤–∞–∫–∞–Ω—Å–∏–π
            async with AsyncSessionLocal() as session:
                stmt = select(Vacancy).order_by(desc(Vacancy.created_at))
                result = await session.execute(stmt)
                vacancies = result.scalars().all()

                if not vacancies:
                    await query.message.edit_text("–ü–æ–∫–∞ –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π")
                    return

                keyboard = InlineKeyboardMarkup(inline_keyboard=[])

                for vacancy in vacancies:
                    count_stmt = select(Application).where(Application.vacancy_id == vacancy.id, Application.deleted_at.is_(None))
                    count_result = await session.execute(count_stmt)
                    applications_count = len(count_result.scalars().all())

                    button_text = f"{vacancy.title} ({applications_count} –æ—Ç–∫–ª–∏–∫–æ–≤)"
                    button = InlineKeyboardButton(
                        text=button_text,
                        callback_data=VacancyCallback(vacancy_id=vacancy.id).pack()
                    )
                    keyboard.inline_keyboard.append([button])

                await query.message.edit_text("üìã –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∫–ª–∏–∫–æ–≤:", reply_markup=keyboard)

        elif callback_data.to == "applications":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –æ—Ç–∫–ª–∏–∫–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
            async with AsyncSessionLocal() as session:
                vacancy_stmt = select(Vacancy).where(Vacancy.id == callback_data.vacancy_id)
                vacancy_result = await session.execute(vacancy_stmt)
                vacancy = vacancy_result.scalar_one_or_none()

                if not vacancy:
                    await query.message.edit_text("–í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return

                apps_stmt = select(Application).where(Application.vacancy_id == callback_data.vacancy_id, Application.deleted_at.is_(None)).order_by(desc(Application.created_at))
                apps_result = await session.execute(apps_stmt)
                applications = apps_result.scalars().all()

                if not applications:
                    await query.message.edit_text(f"üìã –í–∞–∫–∞–Ω—Å–∏—è: {vacancy.title}\n\n–û—Ç–∫–ª–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
                    return

                keyboard = InlineKeyboardMarkup(inline_keyboard=[])

                for app in applications:
                    button_text = app.name
                    if app.phone:
                        button_text += f" - {app.phone}"
                    if app.email:
                        button_text += f" - {app.email}"

                    status = "‚úÖ" if app.is_processed else "‚ùå"
                    button_text = f"{status} {button_text}"

                    button = InlineKeyboardButton(
                        text=button_text,
                        callback_data=ApplicationCallback(application_id=app.id).pack()
                    )
                    keyboard.inline_keyboard.append([button])

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º"
                back_button = InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –≤–∞–∫–∞–Ω—Å–∏—è–º",
                    callback_data=BackCallback(to="vacancies").pack()
                )
                keyboard.inline_keyboard.append([back_button])

                text = f"üìã –í–∞–∫–∞–Ω—Å–∏—è: <b>{vacancy.title}</b>\n"
                text += f"üìä –í—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–æ–≤: <b>{len(applications)}</b>\n\n"
                text += "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∫–ª–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:"

                await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

        elif callback_data.to == "unprocessed":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤
            async with AsyncSessionLocal() as session:
                from sqlalchemy.orm import selectinload
                stmt = select(Application).options(selectinload(Application.vacancy)).where(Application.is_processed == False, Application.deleted_at.is_(None)).order_by(desc(Application.created_at))
                result = await session.execute(stmt)
                unprocessed_applications = result.scalars().all()

                if not unprocessed_applications:
                    await query.message.edit_text("‚úÖ –í—Å–µ –æ—Ç–∫–ª–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
                    return

                keyboard = InlineKeyboardMarkup(inline_keyboard=[])

                for app in unprocessed_applications:
                    button_text = app.name
                    if app.phone:
                        button_text += f" - {app.phone}"
                    if app.email:
                        button_text += f" - {app.email}"

                    button_text = f"‚ùå {button_text}"

                    button = InlineKeyboardButton(
                        text=button_text,
                        callback_data=ApplicationCallback(application_id=app.id, source="unprocessed").pack()
                    )
                    keyboard.inline_keyboard.append([button])

                text = f"‚ùå <b>–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏ ({len(unprocessed_applications)}):</b>\n\n"
                text += "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∫–ª–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏:"

                await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

    @dp.message(Command("export"))
    async def export_handler(message: Message) -> None:
        status_msg = await message.answer("üìä –°–æ–∑–¥–∞—é Excel —Ñ–∞–π–ª —Å –æ—Ç–∫–ª–∏–∫–∞–º–∏...")

        try:
            async with AsyncSessionLocal() as session:
                from sqlalchemy.orm import selectinload

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ —É–¥–∞–ª–µ–Ω–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏ —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
                stmt = select(Application).options(selectinload(Application.vacancy)).where(
                    Application.deleted_at.is_(None)
                ).order_by(desc(Application.created_at))
                result = await session.execute(stmt)
                applications = result.scalars().all()

                if not applications:
                    await status_msg.edit_text("üì≠ –ù–µ—Ç –æ—Ç–∫–ª–∏–∫–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                    import asyncio
                    asyncio.create_task(delete_message_after_delay(status_msg, 2))
                    asyncio.create_task(delete_message_after_delay(message, 2))
                    return

                # –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
                from openpyxl import Workbook
                from openpyxl.styles import Font, PatternFill, Alignment
                from datetime import datetime

                wb = Workbook()
                ws = wb.active
                ws.title = "–û—Ç–∫–ª–∏–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏"

                # –ó–∞–≥–æ–ª–æ–≤–∫–∏
                headers = [
                    "ID", "–ò–º—è", "Email", "–¢–µ–ª–µ—Ñ–æ–Ω", "–í–∞–∫–∞–Ω—Å–∏—è",
                    "–°—Ç–∞—Ç—É—Å", "–î–∞—Ç–∞ –æ—Ç–∫–ª–∏–∫–∞", "–°–æ–æ–±—â–µ–Ω–∏–µ", "–§–∞–π–ª", "–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ"
                ]

                # –°—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                header_font = Font(bold=True, color="FFFFFF")
                header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")

                for col, header in enumerate(headers, 1):
                    cell = ws.cell(row=1, column=col, value=header)
                    cell.font = header_font
                    cell.fill = header_fill
                    cell.alignment = Alignment(horizontal="center")

                # –î–∞–Ω–Ω—ã–µ
                for row, app in enumerate(applications, 2):
                    ws.cell(row=row, column=1, value=app.id)
                    ws.cell(row=row, column=2, value=app.name or "")
                    ws.cell(row=row, column=3, value=app.email or "")
                    ws.cell(row=row, column=4, value=app.phone or "")
                    ws.cell(row=row, column=5, value=app.vacancy.title if app.vacancy else "")
                    ws.cell(row=row, column=6, value="–û–±—Ä–∞–±–æ—Ç–∞–Ω" if app.is_processed else "–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                    ws.cell(row=row, column=7, value=app.created_at.strftime('%d.%m.%Y %H:%M') if app.created_at else "")

                    # –ö–æ–ª–æ–Ω–∫–∞ "–°–æ–æ–±—â–µ–Ω–∏–µ" —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Ç–µ–∫—Å—Ç–∞
                    message_cell = ws.cell(row=row, column=8, value=app.applicant_message or "")
                    message_cell.alignment = Alignment(wrap_text=True, vertical="top")

                    ws.cell(row=row, column=9, value=app.attachment_filename or "")

                    # –ö–æ–ª–æ–Ω–∫–∞ "–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ" —Å –æ—á–∏—â–µ–Ω–Ω—ã–º –æ—Ç HTML —Ç–µ–∫—Å—Ç–æ–º
                    summary_text = clean_html_tags(app.summary) if app.summary else ""
                    summary_cell = ws.cell(row=row, column=10, value=summary_text)
                    summary_cell.alignment = Alignment(wrap_text=True, vertical="top")

                # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
                for column in ws.columns:
                    max_length = 0
                    column_letter = column[0].column_letter
                    for cell in column:
                        try:
                            if len(str(cell.value)) > max_length:
                                max_length = len(str(cell.value))
                        except:
                            pass
                    adjusted_width = min(max_length + 2, 50)
                    ws.column_dimensions[column_letter].width = adjusted_width

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
                filename = f"–æ—Ç–∫–ª–∏–∫–∏_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
                file_path = f"exports/{filename}"

                # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                import os
                os.makedirs("exports", exist_ok=True)

                wb.save(file_path)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                from aiogram.types import FSInputFile
                file = FSInputFile(file_path, filename=filename)

                await status_msg.edit_text(f"‚úÖ Excel —Ñ–∞–π–ª –≥–æ—Ç–æ–≤!\n–û—Ç–∫–ª–∏–∫–∏: {len(applications)}")
                await message.answer_document(
                    file,
                    caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–∫–ª–∏–∫–æ–≤\n\n"
                           f"–í—Å–µ–≥–æ –æ—Ç–∫–ª–∏–∫–æ–≤: {len(applications)}\n"
                           f"–°–æ–∑–¥–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
                )

                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                try:
                    os.remove(file_path)
                except:
                    pass

                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                import asyncio
                asyncio.create_task(delete_message_after_delay(status_msg, 2))
                asyncio.create_task(delete_message_after_delay(message, 2))

        except Exception as e:
            await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Excel: {str(e)}")
            import asyncio
            asyncio.create_task(delete_message_after_delay(status_msg, 2))
            asyncio.create_task(delete_message_after_delay(message, 2))

    @dp.callback_query(SummaryCallback.filter())
    async def summary_handler(query: CallbackQuery, callback_data: SummaryCallback) -> None:
        await query.answer()

        if callback_data.action == "show":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤—ã–π summary
            async with AsyncSessionLocal() as session:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫–ª–∏–∫
                app_stmt = select(Application).where(Application.id == callback_data.application_id)
                app_result = await session.execute(app_stmt)
                application = app_result.scalar_one_or_none()

                if not application:
                    await query.message.answer("‚ùå –û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return

                if application.summary:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ—Ç–æ–≤—ã–π summary
                    summary_msg = f"üìä <b>–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ –¥–ª—è {application.name}:</b>\n\n{application.summary}"
                    await query.message.answer(summary_msg, parse_mode="HTML")
                else:
                    await query.message.answer("‚ùå –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω")

        elif callback_data.action == "generate":
            status_msg = await query.message.answer("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ...")

            try:
                async with AsyncSessionLocal() as session:
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫–ª–∏–∫
                    app_stmt = select(Application).where(Application.id == callback_data.application_id)
                    app_result = await session.execute(app_stmt)
                    application = app_result.scalar_one_or_none()

                    if not application:
                        await status_msg.edit_text("‚ùå –û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        return

                    # –ü–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é
                    vacancy_stmt = select(Vacancy).where(Vacancy.id == application.vacancy_id)
                    vacancy_result = await session.execute(vacancy_stmt)
                    vacancy = vacancy_result.scalar_one_or_none()

                    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ summary
                    summary_service = ResumeSummaryService()

                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º summary
                    summary = await summary_service.generate_summary_for_application(application, vacancy)

                    if summary:
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º summary –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                        application.summary = summary
                        await session.commit()

                        await status_msg.edit_text("‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π summary
                        summary_msg = f"ü§ñ <b>–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ –¥–ª—è {application.name}:</b>\n\n{summary}"
                        await query.message.answer(summary_msg, parse_mode="HTML")

                        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                        import asyncio
                        asyncio.create_task(delete_message_after_delay(status_msg, 2))

                    else:
                        await status_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—é–º–µ")
                        import asyncio
                        asyncio.create_task(delete_message_after_delay(status_msg, 3))

            except Exception as e:
                await status_msg.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
                import asyncio
                asyncio.create_task(delete_message_after_delay(status_msg, 3))

    @dp.callback_query(ResumeCallback.filter())
    async def resume_handler(query: CallbackQuery, callback_data: ResumeCallback) -> None:
        await query.answer()

        if callback_data.action == "download":
            async with AsyncSessionLocal() as session:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∫–ª–∏–∫
                app_stmt = select(Application).where(Application.id == callback_data.application_id)
                app_result = await session.execute(app_stmt)
                application = app_result.scalar_one_or_none()

                if not application:
                    await query.message.answer("‚ùå –û—Ç–∫–ª–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                user_id = query.from_user.id
                if application.file_path and os.path.exists(application.file_path):
                    try:
                        from aiogram.types import FSInputFile
                        file = FSInputFile(application.file_path, filename=application.attachment_filename)
                        file_msg = await query.message.answer_document(file, caption=f"üìÑ –†–µ–∑—é–º–µ –æ—Ç {application.name}")
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–π–ª–æ–º
                        user_resume_messages[user_id] = file_msg.message_id
                    except Exception as e:
                        error_msg = await query.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
                        user_resume_messages[user_id] = error_msg.message_id
                elif application.file_url:
                    url_msg = await query.message.answer(f"üìÑ –§–∞–π–ª —Ä–µ–∑—é–º–µ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ —Å—Å—ã–ª–∫–µ: {application.file_url}")
                    user_resume_messages[user_id] = url_msg.message_id
                else:
                    await query.message.answer("‚ùå –§–∞–π–ª —Ä–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω")

    @dp.message(Command("accounts"))
    async def accounts_handler(message: Message) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö Gmail –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        import json
        import os

        accounts_config_path = "bot/gmail_accounts.json"

        if not os.path.exists(accounts_config_path):
            await message.answer("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        with open(accounts_config_path, 'r', encoding='utf-8') as f:
            accounts = json.load(f)

        if not accounts:
            await message.answer("üì≠ –ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö Gmail –∞–∫–∫–∞—É–Ω—Ç–æ–≤\n\n"
                               "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç add_gmail_account.py –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for account in accounts:
            status_emoji = "‚úÖ" if account.get('enabled', True) else "‚ùå"
            button_text = f"{status_emoji} {account.get('name', account['id'])}"

            button = InlineKeyboardButton(
                text=button_text,
                callback_data=AccountCallback(account_id=account['id']).pack()
            )
            keyboard.inline_keyboard.append([button])

        text = "üìß <b>Gmail –∞–∫–∫–∞—É–Ω—Ç—ã</b>\n\n"
        text += f"–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: <b>{len(accounts)}</b>\n"
        enabled_count = sum(1 for acc in accounts if acc.get('enabled', True))
        text += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{enabled_count}</b>\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:"

        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    @dp.callback_query(AccountCallback.filter())
    async def account_details_handler(query: CallbackQuery, callback_data: AccountCallback) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        await query.answer()

        import json
        import os

        accounts_config_path = "bot/gmail_accounts.json"

        with open(accounts_config_path, 'r', encoding='utf-8') as f:
            accounts = json.load(f)

        # –ù–∞—Ö–æ–¥–∏–º –∞–∫–∫–∞—É–Ω—Ç
        account = None
        for acc in accounts:
            if acc['id'] == callback_data.account_id:
                account = acc
                break

        if not account:
            await query.message.edit_text("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        is_enabled = account.get('enabled', True)
        status_emoji = "‚úÖ" if is_enabled else "‚ùå"
        status_text = "–ê–∫—Ç–∏–≤–µ–Ω" if is_enabled else "–û—Ç–∫–ª—é—á–µ–Ω"

        text = f"üìß <b>{account.get('name', account['id'])}</b>\n\n"
        text += f"üÜî <b>ID:</b> <code>{account['id']}</code>\n"
        text += f"üè∑Ô∏è <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_text}\n\n"

        text += f"üìÇ <b>–§–∞–π–ª—ã:</b>\n"
        text += f"   ‚Ä¢ Credentials: <code>{account.get('credentials_path', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</code>\n"
        text += f"   ‚Ä¢ Token: <code>{account.get('token_path', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}</code>\n"

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        if is_enabled:
            toggle_button = InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
                callback_data=AccountToggleCallback(account_id=account['id'], action="disable").pack()
            )
        else:
            toggle_button = InlineKeyboardButton(
                text="‚úÖ –í–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç",
                callback_data=AccountToggleCallback(account_id=account['id'], action="enable").pack()
            )

        keyboard.inline_keyboard.append([toggle_button])

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        back_button = InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É",
            callback_data="back_to_accounts"
        )
        keyboard.inline_keyboard.append([back_button])

        await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

    @dp.callback_query(AccountToggleCallback.filter())
    async def account_toggle_handler(query: CallbackQuery, callback_data: AccountToggleCallback) -> None:
        """–í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç"""
        await query.answer()

        import json

        accounts_config_path = "bot/gmail_accounts.json"

        with open(accounts_config_path, 'r', encoding='utf-8') as f:
            accounts = json.load(f)

        # –ù–∞—Ö–æ–¥–∏–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–∫–∫–∞—É–Ω—Ç
        account_updated = False
        for account in accounts:
            if account['id'] == callback_data.account_id:
                if callback_data.action == "enable":
                    account['enabled'] = True
                    status_msg = f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç <b>{account.get('name', account['id'])}</b> –≤–∫–ª—é—á–µ–Ω"
                else:
                    account['enabled'] = False
                    status_msg = f"‚ùå –ê–∫–∫–∞—É–Ω—Ç <b>{account.get('name', account['id'])}</b> –æ—Ç–∫–ª—é—á–µ–Ω"
                account_updated = True
                break

        if not account_updated:
            await query.message.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        with open(accounts_config_path, 'w', encoding='utf-8') as f:
            json.dump(accounts, f, indent=2, ensure_ascii=False)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification = await query.message.answer(status_msg, parse_mode="HTML")

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
        account_callback = AccountCallback(account_id=callback_data.account_id)
        await account_details_handler(query, account_callback)

        # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        import asyncio
        asyncio.create_task(delete_message_after_delay(notification, 2))

    @dp.callback_query(lambda c: c.data == "back_to_accounts")
    async def back_to_accounts_handler(query: CallbackQuery) -> None:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Å–ø–∏—Å–∫—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        await query.answer()

        import json
        import os

        accounts_config_path = "bot/gmail_accounts.json"

        with open(accounts_config_path, 'r', encoding='utf-8') as f:
            accounts = json.load(f)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        for account in accounts:
            status_emoji = "‚úÖ" if account.get('enabled', True) else "‚ùå"
            button_text = f"{status_emoji} {account.get('name', account['id'])}"

            button = InlineKeyboardButton(
                text=button_text,
                callback_data=AccountCallback(account_id=account['id']).pack()
            )
            keyboard.inline_keyboard.append([button])

        text = "üìß <b>Gmail –∞–∫–∫–∞—É–Ω—Ç—ã</b>\n\n"
        text += f"–í—Å–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: <b>{len(accounts)}</b>\n"
        enabled_count = sum(1 for acc in accounts if acc.get('enabled', True))
        text += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{enabled_count}</b>\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:"

        await query.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_auth_states = {}

    @dp.message(Command("add_account"))
    async def add_account_command_handler(message: Message) -> None:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π Gmail –∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ OAuth"""
        from bot.gmail_account_manager import GmailAccountManager

        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OAuth URL
            success, auth_url, flow_data = GmailAccountManager.generate_auth_url()

            if not success:
                await message.answer(auth_url, parse_mode="HTML")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_auth_states[message.from_user.id] = True

            auth_msg = (
                "üîê <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ Gmail –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n"
                "1Ô∏è‚É£ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:\n"
                f"<a href='{auth_url}'>–û—Ç–∫—Ä—ã—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Google</a>\n\n"
                "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ Gmail –∞–∫–∫–∞—É–Ω—Ç –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø\n\n"
                "3Ô∏è‚É£ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏\n\n"
                "4Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —ç—Ç–æ—Ç –∫–æ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n\n"
                "üí° –ö–æ–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å <code>4/</code> –∏ –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ —Ç–∞–∫:\n"
                "<code>4/0Adeu5BW...</code>"
            )

            await message.answer(auth_msg, parse_mode="HTML", disable_web_page_preview=True)

        except Exception as e:
            error_text = (
                f"‚ùå <b>–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏</b>\n\n"
                f"<code>{str(e)}</code>\n\n"
                f"üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ credentials.json –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ gmail_tokens/"
            )
            await message.answer(error_text, parse_mode="HTML")

    @dp.message(lambda message: message.from_user.id in user_auth_states and user_auth_states.get(message.from_user.id))
    async def handle_auth_code(message: Message) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        from bot.gmail_account_manager import GmailAccountManager

        auth_code = message.text.strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if not auth_code.startswith('4/'):
            await message.answer(
                "‚ö†Ô∏è –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n\n"
                "–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å <code>4/</code>\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
                parse_mode="HTML"
            )
            return

        status_msg = await message.answer("‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏...")

        try:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å –∫–æ–¥–æ–º
            success, msg, account_data = GmailAccountManager.complete_auth_with_code(auth_code)

            # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
            del user_auth_states[message.from_user.id]

            if success:
                # –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω
                final_text = (
                    "‚úÖ <b>–ù–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
                    f"üìß <b>Email:</b> <code>{account_data['name']}</code>\n"
                    f"üÜî <b>ID:</b> <code>{account_data['id']}</code>\n"
                    f"üè∑Ô∏è <b>–°—Ç–∞—Ç—É—Å:</b> ‚ùå –û—Ç–∫–ª—é—á–µ–Ω\n\n"
                    "üí° <b>–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:</b>\n"
                    "1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /accounts\n"
                    "2. –í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç\n"
                    "3. –ù–∞–∂–º–∏—Ç–µ \"‚úÖ –í–∫–ª—é—á–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç\""
                )
                await status_msg.edit_text(final_text, parse_mode="HTML")
            else:
                # –û—à–∏–±–∫–∞
                await status_msg.edit_text(msg, parse_mode="HTML")

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
            import asyncio
            asyncio.create_task(delete_message_after_delay(message, 1))

        except Exception as e:
            # –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–¥–∞
            if message.from_user.id in user_auth_states:
                del user_auth_states[message.from_user.id]

            error_text = (
                f"‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</b>\n\n"
                f"<code>{str(e)}</code>\n\n"
                f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑: /add_account"
            )
            await status_msg.edit_text(error_text, parse_mode="HTML")

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º
            import asyncio
            asyncio.create_task(delete_message_after_delay(message, 1))

    @dp.message(Command("cancel"))
    async def cancel_handler(message: Message) -> None:
        """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é"""
        user_id = message.from_user.id

        if user_id in user_auth_states:
            del user_auth_states[user_id]
            await message.answer("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        else:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã")
