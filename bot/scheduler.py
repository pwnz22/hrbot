import asyncio
import logging
from datetime import datetime
from bot.gmail_parser import GmailParser

logger = logging.getLogger(__name__)

class GmailScheduler:
    def __init__(self, interval_minutes: int = 5):
        """
        –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ Gmail

        Args:
            interval_minutes: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
        """
        self.interval_minutes = interval_minutes
        self.parser = GmailParser()
        self.is_running = False
        self.task = None

    async def check_emails(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞ –∏ –ø–∞—Ä—Å–∏—Ç –∏—Ö"""
        try:
            logger.info(f"[{datetime.now().strftime('%H:%M:%S')}] –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ Gmail...")
            result = await self.parser.parse_new_emails()

            if result['parsed_count'] > 0:
                logger.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç–∫–ª–∏–∫–æ–≤: {result['parsed_count']}")
                if result['new_vacancies']:
                    logger.info(f"üìã –ù–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏: {', '.join(result['new_vacancies'])}")
            else:
                logger.info("üì≠ –ù–æ–≤—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Gmail: {e}")

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É"""
        if self.is_running:
            logger.warning("Scheduler —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self.is_running = True
        logger.info(f"üöÄ Scheduler –∑–∞–ø—É—â–µ–Ω. –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.interval_minutes} –º–∏–Ω.")

        while self.is_running:
            await self.check_emails()
            await asyncio.sleep(self.interval_minutes * 60)

    async def start_background(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç scheduler –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        if self.task and not self.task.done():
            logger.warning("Scheduler —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ")
            return

        self.task = asyncio.create_task(self.start())
        logger.info(f"üîÑ Scheduler –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.interval_minutes} –º–∏–Ω.)")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É"""
        self.is_running = False
        if self.task:
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        logger.info("‚èπÔ∏è Scheduler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
