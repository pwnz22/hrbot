import asyncio
import logging
import json
import os
from datetime import datetime
from bot.gmail_parser import GmailParser

logger = logging.getLogger(__name__)

class GmailScheduler:
    def __init__(self, interval_minutes: int = 5, accounts_config_path: str = "bot/gmail_accounts.json"):
        """
        –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ Gmail

        Args:
            interval_minutes: –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 –º–∏–Ω—É—Ç)
            accounts_config_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        """
        self.interval_minutes = interval_minutes
        self.accounts_config_path = accounts_config_path
        self.parsers = []
        self.is_running = False
        self.task = None
        self._load_accounts()

    def _load_accounts(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä—ã"""
        try:
            if not os.path.exists(self.accounts_config_path):
                logger.warning(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {self.accounts_config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç.")
                self.parsers = [GmailParser()]
                return

            with open(self.accounts_config_path, 'r', encoding='utf-8') as f:
                accounts = json.load(f)

            for account in accounts:
                if account.get('enabled', True):
                    parser = GmailParser(
                        account_id=account['id'],
                        credentials_path=account['credentials_path'],
                        token_path=account['token_path']
                    )
                    self.parsers.append(parser)
                    logger.info(f"üìß –î–æ–±–∞–≤–ª–µ–Ω –∞–∫–∫–∞—É–Ω—Ç: {account.get('name', account['id'])}")

            if not self.parsers:
                logger.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç.")
                self.parsers = [GmailParser()]

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")
            logger.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç")
            self.parsers = [GmailParser()]

    async def check_emails(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –ø–∏—Å—å–º–∞ –∏ –ø–∞—Ä—Å–∏—Ç –∏—Ö –∏–∑ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
        try:
            logger.info(f"[{datetime.now().strftime('%H:%M:%S')}] –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ Gmail...")

            total_parsed = 0
            all_new_vacancies = []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã
            for parser in self.parsers:
                try:
                    result = await parser.parse_new_emails()

                    if result['parsed_count'] > 0:
                        total_parsed += result['parsed_count']
                        logger.info(f"‚úÖ [{parser.account_id}] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç–∫–ª–∏–∫–æ–≤: {result['parsed_count']}")

                        if result['new_vacancies']:
                            all_new_vacancies.extend(result['new_vacancies'])
                            logger.info(f"üìã [{parser.account_id}] –ù–æ–≤—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏: {', '.join(result['new_vacancies'])}")
                    else:
                        logger.info(f"üì≠ [{parser.account_id}] –ù–æ–≤—ã—Ö –æ—Ç–∫–ª–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {parser.account_id}: {e}")

            # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if total_parsed > 0:
                logger.info(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç–∫–ª–∏–∫–æ–≤: {total_parsed}")
                if all_new_vacancies:
                    unique_vacancies = list(set(all_new_vacancies))
                    logger.info(f"üìã –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π: {len(unique_vacancies)}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Gmail: {e}")

    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É"""
        if self.is_running:
            logger.warning("Scheduler —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return

        self.is_running = True
        logger.info(f"üöÄ Scheduler –∑–∞–ø—É—â–µ–Ω. –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.interval_minutes} –º–∏–Ω.")

        while self.is_running:
            await self.check_emails()
            await asyncio.sleep(self.interval_minutes * 60)

    async def start_background(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç scheduler –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        if self.task and not self.task.done():
            logger.warning("Scheduler —É–∂–µ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ")
            return

        self.task = asyncio.create_task(self.start())
        logger.info(f"üîÑ Scheduler –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {self.interval_minutes} –º–∏–Ω.)")

    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É"""
        self.is_running = False
        if self.task:
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        logger.info("‚èπÔ∏è Scheduler –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
