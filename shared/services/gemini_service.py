import os
import logging
from typing import Optional
import google.generativeai as genai
from dotenv import load_dotenv

load_dotenv()

logger = logging.getLogger(__name__)

class GeminiService:
    """Service for working with Google Gemini API"""

    def __init__(self):
        api_key = os.getenv("GEMINI_API_KEY")
        if not api_key:
            raise ValueError("GEMINI_API_KEY environment variable is required")

        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-2.5-pro')

    def generate_resume_summary(self, resume_text: str, cover_letter_text: str = "", vacancy_title: str = "") -> Optional[str]:
        """
        Generate HTML summary for resume using Gemini API

        Args:
            resume_text: Extracted text from resume file
            cover_letter_text: Text from cover letter/applicant message
            vacancy_title: Title of the vacancy

        Returns:
            Generated HTML summary or None if generation failed
        """
        prompt = self._build_prompt(resume_text, cover_letter_text, vacancy_title)

        try:
            response = self.model.generate_content(prompt)
            return response.text
        except Exception as e:
            logger.error(f"Error generating resume summary: {str(e)}")
            return None

    def _build_prompt(self, resume_text: str, cover_letter_text: str, vacancy_title: str) -> str:
        """Build prompt for Gemini API"""
        prompt = """–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π HR-–∞–Ω–∞–ª–∏—Ç–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—é–º–µ –∏ —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∫—Ä–∞—Ç–∫–æ–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏.

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–∏–∂–µ —Ç–µ–∫—Å—Ç—ã –∏ –≤–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è Telegram (—Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π) —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏:

üìã <b>–í–∞–∫–∞–Ω—Å–∏—è:</b> [–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏]

üë§ <b>–ö–∞–Ω–¥–∏–¥–∞—Ç:</b> [–ø–æ–ª–Ω–æ–µ –∏–º—è]
üìß <b>Email:</b> [email –∏–ª–∏ "–Ω–µ —É–∫–∞–∑–∞–Ω"]
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> [—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ "–Ω–µ —É–∫–∞–∑–∞–Ω"]
üîó <b>GitHub:</b> [—Å—Å—ã–ª–∫–∞ –∏–ª–∏ "–Ω–µ —É–∫–∞–∑–∞–Ω"]

üìù <b>–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ:</b>
[3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –∫–ª—é—á–µ–≤—ã—Ö —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö –∏ –æ–ø—ã—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –ø–æ–ª—å–∑—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏]

üõ† <b>–ö–ª—é—á–µ–≤—ã–µ –Ω–∞–≤—ã–∫–∏:</b>
‚Ä¢ [–Ω–∞–≤—ã–∫ 1]
‚Ä¢ [–Ω–∞–≤—ã–∫ 2]
‚Ä¢ [–Ω–∞–≤—ã–∫ 3]
‚Ä¢ [–Ω–∞–≤—ã–∫ 4]
‚Ä¢ [–Ω–∞–≤—ã–∫ 5]

‚è∞ <b>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</b> [X –ª–µ—Ç]

üéì <b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b>
[–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è]

‚ö†Ô∏è <b>–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏:</b>
[–µ—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∞—Å–Ω—ã–µ —Ñ–ª–∞–≥–∏ - –ø–µ—Ä–µ—á–∏—Å–ª–∏, –µ—Å–ª–∏ –Ω–µ—Ç - –Ω–µ –≤–∫–ª—é—á–∞–π —ç—Ç–æ—Ç –±–ª–æ–∫]

–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ HTML —Ç–µ–≥–∏ –¥–ª—è Telegram: <b>, <i>, <u>, <code>, <pre>. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–∂–Ω—É—é HTML —Ä–∞–∑–º–µ—Ç–∫—É!

–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:"""

        if vacancy_title:
            prompt += f"\n\n<vacancy_title>\n{vacancy_title}\n</vacancy_title>"

        prompt += f"\n\n<resume>\n{resume_text}\n</resume>"

        if cover_letter_text:
            prompt += f"\n\n<cover_letter>\n{cover_letter_text}\n</cover_letter>"

        return prompt

    def generate_interview_questions(self, resume_text: str, vacancy_title: str = "") -> Optional[str]:
        """
        Generate interview questions based on candidate's resume

        Args:
            resume_text: Extracted text from resume file
            vacancy_title: Title of the vacancy

        Returns:
            Generated HTML questions or None if generation failed
        """
        prompt = f"""–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. –ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—é–º–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤—å 10 –ö–†–ê–¢–ö–ò–• –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è —Å –ö–†–ê–¢–ö–ò–ú–ò –æ—Ç–≤–µ—Ç–∞–º–∏.

–í–ê–ñ–ù–û:
- –í–æ–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ö–û–†–û–¢–ö–ò–ú–ò (–º–∞–∫—Å–∏–º—É–º 1 —Å—Ç—Ä–æ–∫–∞)
- –û—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –û–ß–ï–ù–¨ –ö–†–ê–¢–ö–ò–ú–ò (–º–∞–∫—Å–∏–º—É–º 2 —Å—Ç—Ä–æ–∫–∏)
- –í–æ–ø—Ä–æ—Å—ã —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã –Ω–∞–≤—ã–∫–∞–º –∏–∑ —Ä–µ–∑—é–º–µ
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ HTML —Ç–µ–≥–∏: <b>, <i>

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:

‚ùì <b>–í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è:</b>

1. <b>Q:</b> [–∫—Ä–∞—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å]
<i>A:</i> [–∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç, –º–∞–∫—Å 2 —Å—Ç—Ä–æ–∫–∏]

2. <b>Q:</b> [–∫—Ä–∞—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å]
<i>A:</i> [–∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç, –º–∞–∫—Å 2 —Å—Ç—Ä–æ–∫–∏]

3. <b>Q:</b> [–∫—Ä–∞—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å]
<i>A:</i> [–∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç, –º–∞–∫—Å 2 —Å—Ç—Ä–æ–∫–∏]

4. <b>Q:</b> [–∫—Ä–∞—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å]
<i>A:</i> [–∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç, –º–∞–∫—Å 2 —Å—Ç—Ä–æ–∫–∏]

5. <b>Q:</b> [–∫—Ä–∞—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å]
<i>A:</i> [–∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç, –º–∞–∫—Å 2 —Å—Ç—Ä–æ–∫–∏]

6. <b>Q:</b> [–∫—Ä–∞—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å]
<i>A:</i> [–∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç, –º–∞–∫—Å 2 —Å—Ç—Ä–æ–∫–∏]

7. <b>Q:</b> [–∫—Ä–∞—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å]
<i>A:</i> [–∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç, –º–∞–∫—Å 2 —Å—Ç—Ä–æ–∫–∏]

8. <b>Q:</b> [–∫—Ä–∞—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å]
<i>A:</i> [–∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç, –º–∞–∫—Å 2 —Å—Ç—Ä–æ–∫–∏]

9. <b>Q:</b> [–∫—Ä–∞—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å]
<i>A:</i> [–∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç, –º–∞–∫—Å 2 —Å—Ç—Ä–æ–∫–∏]

10. <b>Q:</b> [–∫—Ä–∞—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å]
<i>A:</i> [–∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç, –º–∞–∫—Å 2 —Å—Ç—Ä–æ–∫–∏]

–î–∞–Ω–Ω—ã–µ:
–í–∞–∫–∞–Ω—Å–∏—è: {vacancy_title if vacancy_title else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"}
–†–µ–∑—é–º–µ: {resume_text}"""

        try:
            response = self.model.generate_content(prompt)
            return response.text
        except Exception as e:
            logger.error(f"Error generating interview questions: {str(e)}")
            return None